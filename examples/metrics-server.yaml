---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: metrics-server-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metrics-server
  namespace: kube-system
data:
  apiservice.yaml: |
    apiVersion: apiregistration.k8s.io/v1beta1
    kind: APIService
    metadata:
      name: v1beta1.metrics.k8s.io
    spec:
      caBundle: "REQUEST_HEADER_CLIENT_CA" # TODO this is for sed: find something better
      service:
        name: metrics-server
        namespace: kube-system
      group: metrics.k8s.io
      version: v1beta1
      groupPriorityMinimum: 100
      versionPriority: 100
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: kube-system
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  template:
    metadata:
      name: metrics-server
      labels:
        k8s-app: metrics-server
    spec:
      serviceAccountName: metrics-server
      initContainers:
      - name: kube-csr
        image: quay.io/julienbalestra/kube-csr:master
        command:
        - /usr/local/bin/kube-csr
        - issue
        - aggregator
        - --csr-name=$(MY_POD_NAME)-$(MY_POD_UID)
        - --query-svc=$(MY_POD_NAMESPACE)/metrics-server # get the clusterIP as SAN
        - --generate
        - --submit
        - --approve
        - --fetch
        - --subject-alternative-names=$(MY_POD_IP),metrics-server.$(MY_POD_NAMESPACE).svc.cluster.local,metrics-server.$(MY_POD_NAMESPACE).svc
        - --private-key-file=/etc/certs/metrics-server.private_key
        - --csr-file=/etc/certs/metrics-server.csr
        - --certificate-file=/etc/certs/metrics-server.certificate
        env:
        - name: MY_POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: certs
          mountPath: /etc/certs

      - name: apply-apiservice
        image: gcr.io/google_containers/hyperkube:v1.11.0
        command:
        - /bin/sh
        - -euxc
        - |
          B64_CA=$(cat /etc/extension-apiserver-authentication/ca.crt | base64 | tr -d '\n')
          /bin/sed -e "s|REQUEST_HEADER_CLIENT_CA|$B64_CA|g" /etc/metrics-server/apiservice.yaml | /hyperkube kubectl apply -f -

        volumeMounts:
        - name: metrics-server
          mountPath: /etc/metrics-server
        - name: extension-apiserver-authentication
          mountPath: /etc/extension-apiserver-authentication/ca.crt
          subPath: requestheader-client-ca-file

      containers:
      - name: metrics-server
        image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
        imagePullPolicy: Always
        command:
        - /metrics-server
        - --client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - --tls-cert-file=/etc/certs/metrics-server.certificate
        - --tls-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - --tls-private-key-file=/etc/certs/metrics-server.private_key
        - --metric-resolution=6s # caution: value for tests, default is 1m0s
        - --source=kubernetes.summary_api:''?useServiceAccount=true&kubeletHttps=true&kubeletPort=10250

        # alternative if the kubelet TLS bootstrap doesn't issue proper server certs
        # this is a common issue before Kubernetes 1.11
        # note the additional: &insecure=true
        #- --source=kubernetes.summary_api:''?useServiceAccount=true&kubeletHttps=true&kubeletPort=10250&insecure=true
        volumeMounts:
        - name: certs
          mountPath: /etc/certs
      volumes:
      - emptyDir:
        name: certs
      - name: extension-apiserver-authentication
        configMap:
          name: extension-apiserver-authentication
      - name: metrics-server
        configMap:
          name: metrics-server
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    kubernetes.io/name: "metrics-server"
spec:
  selector:
    k8s-app: metrics-server
  ports:
  - port: 443
    protocol: TCP
    targetPort: 443
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - nodes/stats
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "certificates.k8s.io"
  resources:
  - "certificatesigningrequests"
  - "certificatesigningrequests/approval"
  - "certificatesigningrequests/status"
  verbs:
  - update
  - create
  - get
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get"]
- apiGroups:
  - "apiregistration.k8s.io"
  resources:
  - "apiservices"
  verbs:
  - create
  - get
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---